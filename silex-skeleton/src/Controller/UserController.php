<?phpnamespace Controller;use Entity\User;use Service\UserManager;use Symfony\Component\Validator\Constraints as Assert;class UserController extends ControllerAbstract{    public function registerAction(){        if(!$this->app['user.manager']->isUserConnected()){                        $user = new User();            $errors = [];            if(!empty ($_POST)){                                // Si le formulaire a déjà été rempli, on stock les données                $user                    ->setLastname($_POST['lastname'])                    ->setFirstname($_POST['firstname'])                    ->setEmail($_POST['email'])                    ->setPhone($_POST['phone'])                    ->setAddress($_POST['address'])                    ->setZipcode($_POST['zipcode'])                    ->setCity($_POST['city'])                ;            // Validation des champs:                                //Sécu nom                if (!$this->validate($_POST['lastname'], new Assert\NotBlank())){                    $errors['lastname'] = 'Le nom est obligatoire';                }elseif(!$this->validate($_POST['lastname'], new Assert\Length(array(                    'min'=>2,'max' =>25,)))){                    $errors['lastname'] = 'Le nom doit comporter entre 2 et 25 caractères';                }                //Sécu prénom                if (!$this->validate($_POST['firstname'], new Assert\NotBlank())){                    $errors['firstname'] = 'Le prénom est obligatoire';                }elseif(!$this->validate($_POST['firstname'], new Assert\Length(array(                    'min'=>2,'max' =>25,)))){                    $errors['firstname'] = 'Le prénom doit comporter entre 2 et 25 caractères';                }                //Sécurité email:                if (!$this->validate($_POST['email'], new Assert\NotBlank())){                    $errors['email'] = 'L\'email obligatoire';                } elseif(!$this->validate($_POST['email'], new Assert\Email())){                    $errors['email'] = "L'email n'est pas valide";                }                //Sécurité Adresse:                if(!$this->validate($_POST['address'], new Assert\NotBlank())){                    $errors['address'] = 'L\'adresse n\'est pas valide';                }elseif(!$this->validate($_POST['address'], new Assert\Length(array(                'min' =>5)))){                    $errors['address'] = 'L\'adresse doit comporter au moins 5 caractères';                }                //Sécurité Code postal:                if(!$this->validate($_POST['zipcode'], new Assert\NotBlank())){                    $errors['zipcode'] = 'Le code postal n\'est pas valide';                }elseif(!$this->validate($_POST['zipcode'], new Assert\Length(array(                'min'=>5,'max' =>5,)))){                    $errors['zipcode'] = 'Le code postal doit comporter 5 chiffres';                }                //Sécurité Ville:                if(!$this->validate($_POST['city'], new Assert\NotBlank())){                    $errors['city'] = 'La ville n\'est pas valide';                                    }elseif(!$this->validate($_POST['city'], new Assert\Length(array(               'min' =>2,'max' =>20,)))){                    $errors['city'] = 'La ville doit comporter entre 2 et 20 caractères';                }                //Sécurité téléphone:                if(!$this->validate($_POST['phone'], new Assert\NotBlank())){                    $errors['phone'] = 'Le téléphone n\'est pas valide';                                   }elseif(!$this->validate($_POST['phone'], new Assert\Length(array(                'min'=> 10, 'max'=> 10)))){                    $errors['phone'] = 'Le téléphone doit comporter 10 chiffres';                }                //Sécurité mot de pase:                if (!$this->validate($_POST['password'], new Assert\NotBlank())){                    $errors['password'] = 'Le mot de passe est obligatoire';                }elseif(!$this->validate($_POST['password'], new Assert\Length(array(                'min'=>8,'max' =>25,)))){                    $errors['password'] = 'Le mot de passe doit comporter au minimum 8 caractères';                }                                // Vérifier si l'utilisateur est déjà inscrit via cet email                $email = $_POST['email'];                $existingUser = $this->app['user.repository']->findByEmail($email);                if(!empty($existingUser)){                    $errors['email'] = "L'email est déjà utilisé";                }                if(empty($errors)){                    $user                        ->setLastname($_POST['lastname'])                        ->setFirstname($_POST['firstname'])                        ->setEmail($_POST['email'])                        ->setPhone($_POST['phone'])                        ->setAddress($_POST['address'])                        ->setZipcode($_POST['zipcode'])                        ->setCity($_POST['city'])                                                 // Cryptage password                        ->setPassword($this->app['user.manager']->encodePassword($_POST['password']))                    ;                                       $this->app['user.repository']->insert($user);                   $this->app['user.manager']->login($user);                    return $this->redirectRoute('profil');                 }else{                    $msg = '<strong>Le formulaire contient des erreurs</strong>';                    $msg .='<br>-' . implode('</br>-', $errors);                    $this->addFlashMessage($msg,'error');                 }            }            return $this->render('register.html.twig',                    ['user' => $user]            );        }        return $this->redirectRoute('profil');     }    // Connexion    public function loginAction(){        if(!$this->app['user.manager']->isUserConnected()){            $email = '';            if(!empty($_POST)){                $email = $_POST['email'];                $user = $this->app['user.repository']->findByEmail($email);                if(!is_null($user)){                                        if($this->app['user.manager']->verifyPassword($_POST['password'], $user->getPassword())){                       $this->app['user.manager']->login($user);                       return $this->redirectRoute('profil');                    }                }                $this->addFlashMessage('Identification incorrecte', 'error');            }                        return $this->render(                'login.html.twig',                ['email' => $email]            );        }else{            return $this->redirectRoute('profil');        }    }                //Déconnexion    public function logoutAction(){                  $this->app['user.manager']->logout();         return $this->redirectRoute('home');    }    // User Modif infos pour le profil    public function editAction(){        $id = $this->app['user.manager']->getUser()->getId();                if(!is_null($id)){            $user = $this->app['user.repository']->findById($id);            $this->render('profil_edition.html.twig', ['user' => $user]);        }else{            return $this->redirectRoute('login');        }                if(!empty($_POST)){                    $user                ->setEmail($_POST['email'])                ->setLastname($_POST['lastname'])                ->setFirstname($_POST['firstname'])                ->setAddress($_POST['address'])                ->setZipcode($_POST['zipcode'])                ->setCity($_POST['city'])                ->setPhone($_POST['phone'])            ;                        if(!empty($_POST['password'])){                    $user->setPassword($this->app['user.manager']->encodePassword($_POST['password']));            }            // Update des infos en bdd            $this->app['user.repository']->update($user);            // faire un nouveau login pour actualiser la session            $this->app['user.manager']->login($user);            return $this->redirectRoute('profil');        }        return $this->render('profil_edition.html.twig', ['user' => $user]);    }        public function profilAction(){        if($this->app['user.manager']->isUserConnected()){            $user = $this->app['user.manager']->getUser();            $id = $user->getId();            $profil =  $this->app['subscription.repository']->findProfilInfo($id);                        return $this->render(            'profil.html.twig',                [                    'user' => $user,                                      'profil' => $profil                ]            );        }        else {            return $this->redirectRoute('login');        }    }        public function forgotPassword(){                // Demander l'adresse mail concernée par le compte        if(!empty($_POST)){            if(filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)){                               // Vérifier que l'adresse mail existe en BDD                $user = $this->app['user.repository']->findByEmail($_POST['email']);                if($user){                    // Si l'adresse existe, on génère un nouveau mdp                    $newPassword = $this->randomPassword(20);                    // On envoie le mdp par mail                    $to  = $user->getEmail();                    $subject = 'Récupération de votre mot de passe - Fleurs d\'ici !';                    $headers  = 'MIME-Version: 1.0' . "\r\n";                    $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";                    $headers .= 'From: fleursdici@gmail.com' . "\r\n";                     $message = "                        <html>                            <head>                                <title>Votre nouveau mot de passe</title>                            </head>                            <body>                                <h1>Votre nouveau mot de passe</h1>                                <p>Suite à votre demande, votre mot de passe a bien été changé.</p>                                <p>Voici votre nouveau mot de passe : $newPassword</p>                                <p>Celui-ci est immédiatement actif, vous pouvez désormais vous connectez                                 sur <a href='fleursdici/utilisateur/connexion'>votre compte</a>.                                 <p>A bientôt chez <a href='fleursdici.fr'>Fleurs d'Ici !</p>                            </body>                        </html>                    ";                    //mail($to, $subject, $message, $headers);                    // On crypte le mdp et on l'actualise en bdd                    $user->setPassword($this->app['user.manager']->encodePassword($newPassword));                    $this->app['user.repository']->update($user);                    $this->addFlashMessage('Un nouveau mot de passe vous a été envoyé par mail', 'success');                    return $this->redirectRoute('login');                } else {                    $this->addFlashMessage('L\'email indiqué n\'existe pas', 'error');                }            } else {                $this->addFlashMessage('L\'email n\'est pas valide', 'error');            }        }                return $this->render('password.html.twig');            }        public function randomPassword($car){        $string = "";        $chaine = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";                srand((double)microtime()*1000000);                for($i=0; $i<$car; $i++) {            $string .= $chaine[rand()%strlen($chaine)];        }                return $string;    }      }  